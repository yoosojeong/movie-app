{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["Movie","_ref","title","poster","genres","synopsis","react_default","a","createElement","className","MoviePoster","alt","map","genre","index","MovieGenre","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","_ref3","src","_ref4","prototype","PropTypes","string","isRequired","array","App","state","limit","handleScroll","innerHeight","window","document","body","scrollHeight","documentElement","scrollTop","console","log","_this","setTimeout","setState","_getMovies","_renderMovies","movies","movie","src_Movie","title_english","medium_cover_image","id","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","stop","this","fetch","then","response","json","data","catch","err","addEventListener","removeEventListener","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c64cafc0.chunk.js","sourcesContent":["/* eslint-disable react/jsx-no-undef */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return(\r\n        <div className=\"Movie\">\r\n\r\n            <div className=\"Movie__top\">            \r\n    \r\n                <div className=\"Movie__Column\">\r\n                    <MoviePoster poster={poster} alt={title} />\r\n                </div>\r\n\r\n                <div className=\"Movie__Column\">\r\n                    <h1>{title}</h1>\r\n\r\n                    <div className=\"Movie__Genres\">\r\n                        {genres.map((genre, index) => <MovieGenre className=\"Movie__Genres\" genre={genre} key={index} />)}\r\n                    </div> \r\n                    \r\n                    <div className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis\r\n                            text={synopsis}\r\n                            maxLine='3'\r\n                            ellipsis='...'\r\n                            trimRight\r\n                            basedOn='letters'\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"Movie__bottom\">\r\n                <div className=\"Movie__Column\">\r\n                    <div className=\"Movie__Like\">\r\n                    \r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster}, {alt}){\r\n    return(\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\r\n        )    \r\n    }\r\n    \r\n    function MovieGenre({genre}){\r\n        return(\r\n            <span className=\"Movie__Genres\">{genre}</span>\r\n        )\r\n    }\r\n\r\n    Movie.prototype = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        synopsis: PropTypes.string.isRequired\r\n    }\r\n\r\n    MoviePoster.propTypes = {\r\n        poster: PropTypes.string.isRequired,\r\n        alt: PropTypes.string.isRequired\r\n    }\r\n\r\n    MovieGenre.prototype = {\r\n        genre: PropTypes.string.isRequired\r\n    }\r\n    \r\n    // class Movie extends Component{\r\n    \r\n    //     static propTypes = {\r\n    //         title: PropTypes.string.isRequired,\r\n    //         poster: PropTypes.string.isRequired\r\n    //     }\r\n    \r\n    //     render(){\r\n    //         console.log(this.props) \r\n    //         return( \r\n    //             <div>\r\n    //                 <MoviePoster poster={this.props.poster}/>\r\n    //                 <h1>{this.props.title}</h1>\r\n    //             </div>\r\n    //         )\r\n    //     } \r\n    // }\r\n\r\n    // class MoviePoster extends Component{\r\n\r\n//     static propTypes = {\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render(){\r\n//         console.log(this.props)\r\n//         return(\r\n//             <img src={this.props.poster} alt=\"Movie Poster\"/>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\nexport default Movie","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// Render: componentWillMount() -> render() -> componentDidMount()\n// Update componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n\nclass App extends Component {\n  \n  state = {\n    limit: 20\n  }\n\n  componentDidMount(){\n    this._getMovies();\n    console.log(\"add\")\n\n    // 스크롤링 이벤트 추가\n    window.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  componentWillMount(){\n    console.log(\"addd\")\n\n    // 스크롤링 이벤트 제거\n    window.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll = () => {\n    const { innerHeight } = window;\n    const { scrollHeight } = document.body;\n    // IE에서는 document.documentElement 를 사용.\n    \n    const scrollTop =\n      (document.documentElement && document.documentElement.scrollTop) ||\n      document.body.scrollTop;\n    \n      // 스크롤링 했을때, 브라우저의 가장 밑에서 100정도 높이가 남았을때에 실행하기위함.\n    if (scrollHeight - innerHeight - scrollTop < 100) {\n        console.log(\"바닥\", this.state.limit)\n        setTimeout(() => {\n          this.setState({\n            limit: this.state.limit+10\n          })\n        }, 10000)\n        this._getMovies();\n    }\n  };\n\n  // index를 쓰지 않고 id를 사용 - key로 index를 사용하면 느림\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie \n        title={movie.title_english} \n        poster={movie.medium_cover_image}\n        genres={movie.genres} \n        synopsis={movie.synopsis}\n        key={movie.id} \n      />\n    })\n    return movies\n  }\n\n  // movies : movies 를 모던JS로 변경\n  _getMovies = async () => {\n    const movies = await this._callApi()\n    console.log(movies)\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count&limit=\" + this.state.limit)\n    .then(console.log(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count&limit=\" + this.state.limit))\n    .then((response) => response.json())\n    .then((json => json.data.movies))\n    .catch((err) => err)\n  }\n\n  render() {\n    console.log(\"did render\");\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"} >\n        {this.state.movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// id가 root인 곳에 render를 출력\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}